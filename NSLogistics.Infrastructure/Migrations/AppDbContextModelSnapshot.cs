// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NSLogistics.Infrastructure.Persistance;

#nullable disable

namespace NSLogistics.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("NSLogistics.Core.Application.ApplicationEntity", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AuctionPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CarYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContainerNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipmentName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShipmentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VinCode")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("NSLogistics.Core.Application.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageBytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("ImageOrigin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("NSLogistics.Core.Shipping.LocationEntity", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PortCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("NSLogistics.Core.Shipping.ShippingPriceEntity", b =>
                {
                    b.Property<Guid>("ShippingPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DestinationLocationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OriginLocationId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TransitDays")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShippingPriceId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("OriginLocationId");

                    b.ToTable("shipping_prices", (string)null);
                });

            modelBuilder.Entity("NSLogistics.Core.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2a378b7-aedf-4712-8a16-f616a413d5f3"),
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Vaja.Kacia@example.com",
                            Firstname = "Saba",
                            IdNumber = "00000000001",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Sani-Peradze",
                            Password = "C62D1C801386EDBDB84735BA14E873B007AF19841A5EC0BE22AD34478FD33086",
                            Role = 0,
                            Salt = "qzlxcBpNh8pJq5GP1V7OBA=="
                        });
                });

            modelBuilder.Entity("NSLogistics.Core.Application.ApplicationEntity", b =>
                {
                    b.HasOne("NSLogistics.Core.User.UserEntity", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NSLogistics.Core.Application.Image", b =>
                {
                    b.HasOne("NSLogistics.Core.Application.ApplicationEntity", "Application")
                        .WithMany("CarImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("NSLogistics.Core.Shipping.ShippingPriceEntity", b =>
                {
                    b.HasOne("NSLogistics.Core.Shipping.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NSLogistics.Core.Shipping.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("OriginLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NSLogistics.Core.Application.ApplicationEntity", b =>
                {
                    b.Navigation("CarImages");
                });

            modelBuilder.Entity("NSLogistics.Core.User.UserEntity", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
